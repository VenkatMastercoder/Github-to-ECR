name: Deploy to EC2 (Docker run)
on:
  push:
    branches: [ "master" ]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push image
        env:
          REGISTRY: ${{ steps.ecr.outputs.registry }}
          REPO: ${{ secrets.ECR_REPOSITORY }} # Pipeline-ECR-to-EC2
          TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPO:$TAG .
          docker tag $REGISTRY/$REPO:$TAG $REGISTRY/$REPO:latest
          docker push $REGISTRY/$REPO:$TAG
          docker push $REGISTRY/$REPO:latest

      - name: SSH to EC2 and run container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            APP_IMAGE=${{ secrets.AWS_ECR_ACCOUNT }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
              | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_ACCOUNT }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            sudo mkdir -p /srv/app
            docker pull $APP_IMAGE
            docker rm -f Pipeline-ECR-to-EC2 || true
            docker run -d --name Pipeline-ECR-to-EC2 \
              --restart unless-stopped \
              --env-file /srv/app/.env \
              -p 80:3000 \
              $APP_IMAGE
            docker image prune -f
